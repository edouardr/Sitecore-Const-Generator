<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(ProjectDir)bin\debug\SitecoreConstGenerator.Core.dll" #>
<#@ assembly name="$(ProjectDir)bin\debug\SitecoreConstGenerator.Infrastructure.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="SitecoreConstGenerator.Core.Entities" #>
<#@ import namespace="SitecoreConstGenerator.Core.Interfaces.Repositories" #>
<#@ import namespace="SitecoreConstGenerator.Infrastructure.Repositories" #>
<#
/************************************************************
*															*
*					   Settings							    *
*															*
************************************************************/


/************************************************************
*															*
*					   Urls								    *
*															*
************************************************************/
	String baseUrl = @"http://YOUR_URL_HERE";
	String templateRootPath = @"/your/path/here";

/************************************************************
*															*
*					 Authentication						    *
*															*
************************************************************/
	Boolean useAuthenticatedRequest = false;
	String userName = @"";
	String password = @"";
#>

// Auto Generated script

<#
	var hostServiceProvider = (IServiceProvider)Host;
	var dte = 
		(EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
	var activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
	var dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
	var defaultNamespace = 
		dteProject.Properties.Item("DefaultNamespace").Value;
	var templateDir = Path.GetDirectoryName(Host.TemplateFile);
	var fullPath = dteProject.Properties.Item("FullPath").Value.ToString();
	fullPath = 
		fullPath.EndsWith("\\") 
			? fullPath.Substring(0, fullPath.Length-1) 
			: fullPath;
	var subNamespace = 
		templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
	var fileNamespace = string.Concat(defaultNamespace, subNamespace);
#>

namespace <#= fileNamespace #>
{
    public static class TemplateIds
    {
<#
	try
	{
		IT4TemplateRepository templatesRepo = new TemplatesT4TemplateRepository(
			new WebApiRepository(baseUrl, userName, password, useAuthenticatedRequest));
	
		var tree = templatesRepo.CreateTree(templateRootPath);
		if(null != tree)
        {
			foreach(var node in tree)
			{  
#>
	<#= templatesRepo.Output(node) #>
<#
			}
        }
	}
	catch(Exception ae)
	{
#>
		// Error while retrieving items. 
		// Message : <#= ae.Message #>
		// See stack trace below for more information :
		/*
		<#= ae.StackTrace #>
		*/
<#
	}
#>
	}
}